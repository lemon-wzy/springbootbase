import org.apache.tools.ant.filters.ReplaceTokens
import com.bmuschko.gradle.docker.tasks.image.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id("com.bmuschko.docker-spring-boot-application") version "9.3.1"

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-security'
    api 'com.mysql:mysql-connector-j:8.0.31'
    api 'org.springframework.boot:spring-boot-configuration-processor'
    api 'org.projectlombok:lombok:1.18.26'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'com.auth0:java-jwt:4.2.1'
    api 'com.baomidou:mybatis-plus-boot-starter:3.5.3.1'
    api 'com.baomidou:mybatis-plus-generator:3.5.3'
    api 'org.apache.velocity:velocity-engine-core:2.3'
    api 'org.springframework.boot:spring-boot-starter-cache'
    api 'org.springframework.boot:spring-boot-starter-data-redis'
    api 'com.alibaba:fastjson:2.0.21'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.0'
    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'io.minio:minio:8.5.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    implementation 'com.qiniu:qiniu-java-sdk:7.12.1'//七牛云

}

group = 'com.lichi'
version = '0.0.1-SNAPSHOT'
description = 'springbootbase'
java.sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

//prodRun
tasks.register("bootRunProd") {
    group("application")
    description("Runs this project as a production application.")
    doFirst {
        System.setProperty("profile", "prod")
    }
    finalizedBy("bootRun")
}
//devRun
tasks.register("bootRunDev") {
    group("application")
    description("Runs this project as a development application.")
    doFirst {
        System.setProperty("profile", "dev")
    }
    finalizedBy("bootRun")
}

//prodJar
tasks.register("bootJarProd") {
    dependsOn("clean")
    group("build")
    description("Builds a production executable jar.")
    doFirst {
        System.setProperty("profile", "prod")
    }
    finalizedBy("bootJar")
}
def jarName = project.name + "-" + project.version + ".jar"
def jarPath = "build/libs/"

//打包完成后将jar包复制到docker目录
bootJar.doLast {
    copy {
        from jarPath
        into "build/docker"
        include jarName
        //重命名
        //rename { jarName }
    }
}

//注册自定义创建dockerfile任务
tasks.register("createDockfileDev", Dockerfile) {
    dependsOn("bootJarDev")
    //创建dockerfile
    from "openjdk:17-ea-oracle"
    exposePort 8080
    copyFile("springbootbase-0.0.1-SNAPSHOT.jar", "/app/app.jar")
    entryPoint("java", "-jar", "-Dspring.profiles.active=dev","/app/app.jar")
}
tasks.register("createDockfileProd", Dockerfile) {
    dependsOn("bootJarProd")
    //创建dockerfile
    from "openjdk:17-ea-oracle"
    exposePort 8080
    copyFile("springbootbase-0.0.1-SNAPSHOT.jar", "/app/app.jar")
    entryPoint("java", "-jar", "-Dspring.profiles.active=prod","/app/app.jar")
}

//构建docker镜像
tasks.register('buildImageDev', DockerBuildImage) {
    group("docker")
    description("Builds a docker image.")
    mustRunAfter("bootJar")
    dependsOn(["createDockfileDev"])
    var imageName = project.name
    var tag = project.version
    images.add(imageName + ":" + tag)
    finalizedBy("startDockerCompose")
}
tasks.register('buildImageProd', DockerBuildImage) {
    group("docker")
    description("Builds a docker image.")
    mustRunAfter("bootJar")
    dependsOn(["createDockfileProd"])
    var imageName = project.name
    var tag = project.version
    images.add(imageName + ":" + tag)
    finalizedBy("startDockerCompose")
}

//启动docker compose
tasks.register("startDockerCompose",Exec) {
    group("docker")
    description("Starts a docker compose.")
    commandLine 'docker-compose', '-f', 'docker-compose.yml', 'up', '-d'
}


//devJar
tasks.register("bootJarDev") {
    dependsOn("clean")
    group("build")
    description("Builds a development executable jar.")
    doFirst {
        System.setProperty("profile", "dev")
    }
    finalizedBy("bootJar")
}

tasks.register("buildNativeImage") {
    dependsOn("clean","bootJarProd")
    group("build")
    description("Builds a native executable.")
    finalizedBy("nativeImage")
}

tasks.register('nativeImage', Exec) {
    commandLine 'sh', 'script/build-native-image.sh'
}

processResources {
    doFirst {
        filter ReplaceTokens, tokens: [activeProfile: System.getProperty("profile", "dev")]
    }
}